// src/app/settings/components/Setting/WorkerSetting.tsx
import Image from 'next/image'
import { useEffect, useState } from 'react'
import { useUpdateWorkerData } from '../../hooks/useUpdateWorkerData'
import ModalInput from '../Dialog/ModalInput'
import ModalColorPicker from '../Dialog/ModalColorPicker'
import { getContrastTextColor } from '@/src/utils/colorsUtils'
import { useRouter } from 'next/navigation'
import { useWorkerData } from '@/src/hooks/useWorkerData'
import { useMainStore } from '@/src/stores/useMainStore'

interface UserSettingProps {
  workerId: string
}


const UserSetting = ({ workerId }: UserSettingProps) => {
  const [formState, setFormState] = useState({
    name: 'Работник',
    nameInput: '',
    telegramId: '',
    telegramIdInput: '',
    color: '#0070F3',
    loading: false,
    modals: {
      name: false,
      telegram: false,
      color: false
    }
  })

  const {
    mainData
  } = useMainStore()

  const {
    worker,
    workplacesForSetting,
    updateMode,
    getWorkerData,
    getWorkerWorkplaces,
    updateWorkplaceEditable,
    updateWorkplaceEnabled,
    notUpdateWorkplace,
    doUpdateWorkplace
  } = useWorkerData()

  const {
    updateColor,
    updateName,
    createWorker
  } = useUpdateWorkerData()

  const router = useRouter()

  // Инициализация данных
  useEffect(() => {
    if (workerId !== 'new') {
      getWorkerData(workerId)
      getWorkerWorkplaces(workerId)
    }
  }, [])

  // Обновление состояния при изменении worker
  useEffect(() => {
    if (worker) {
      setFormState(prev => ({
        ...prev,
        name: worker.name,
        nameInput: worker.name,
        color: worker.color
      }))
    }
  }, [worker])

  // Обработчики модалов
  const handleOpenModal = (modalType: 'name' | 'telegram' | 'color') => {
    setFormState(prev => ({
      ...prev,
      modals: {
        ...prev.modals,
        [modalType]: true
      }
    }))
  }

  const handleCloseModal = (modalType: 'name' | 'telegram' | 'color') => {
    setFormState(prev => ({
      ...prev,
      modals: {
        ...prev.modals,
        [modalType]: false
      }
    }))
  }

  // Обновление данных
  const handleColorUpdate = async (color: string) => {
    setFormState(prev => ({ ...prev, color, loading: true }))
    
    if (worker) {
      try {
        await updateColor(color, worker.id)
        await getWorkerData(worker.id)
      } finally {
        setFormState(prev => ({ ...prev, loading: false, modals: { ...prev.modals, color: false } }))
      }
    }
  }

  const handleNameUpdate = async (name: string) => {
    setFormState(prev => ({ ...prev, loading: true }))
    
    if (worker) {
      try {
        await updateName(name, worker.id)
        await getWorkerData(worker.id)
      } finally {
        setFormState(prev => ({ 
          ...prev, 
          name, 
          nameInput: name, 
          loading: false,
          modals: { ...prev.modals, name: false }
        }))
      }
    }
  }

  const handleTelegramIdUpdate = async (telegramId: string) => {
    setFormState(prev => ({ ...prev, telegramId, loading: true }))
    
    if (worker) {
      // Добавьте логику обновления Telegram ID при необходимости
    }
    
    setFormState(prev => ({ 
      ...prev, 
      telegramIdInput: telegramId,
      loading: false,
      modals: { ...prev.modals, telegram: false }
    }))
  }

  const handleCreateWorker = async () => {
    if (!workerId || !formState.name || !formState.color || !formState.telegramId) return
    
    try {
      await createWorker(formState.name, formState.color, '0', formState.telegramId)
      router.back()
    } catch (error) {
      console.error('Ошибка создания работника:', error)
    }
  }

  return (
    <>
      {/* Модал для имени */}
      <ModalInput
        isOpen={formState.modals.name}
        onClose={() => handleCloseModal('name')}
        closeButton={false}
      >
        <div className="mb-2">Введите имя</div>
        <input
          type="text"
          value={formState.nameInput}
          onChange={(e) => setFormState(prev => ({ ...prev, nameInput: e.target.value }))}
          className="py-2 px-4 w-full border border-[#2B7FFF] rounded-md"
        />
        <div className="grid grid-cols-2 gap-2 mt-4">
          <button
            onClick={() => handleCloseModal('name')}
            disabled={formState.loading}
            className={`flex items-center justify-center p-2 rounded-md ${formState.loading ? 'bg-gray-400' : 'bg-red-500'}`}
          >
            Отмена
          </button>
          <button
            onClick={() => handleNameUpdate(formState.nameInput)}
            disabled={formState.loading}
            className={`flex items-center justify-center p-2 rounded-md ${formState.loading ? 'bg-gray-400' : 'bg-green-500'}`}
          >
            Сохранить
          </button>
        </div>
      </ModalInput>

      {/* Модал для Telegram ID */}
      <ModalInput
        isOpen={formState.modals.telegram}
        onClose={() => handleCloseModal('telegram')}
        closeButton={false}
      >
        <div className="mb-2">Введите TelegramID</div>
        <input
          type="text"
          value={formState.telegramIdInput}
          onChange={(e) => setFormState(prev => ({ ...prev, telegramIdInput: e.target.value }))}
          className="py-2 px-4 w-full border border-[#2B7FFF] rounded-md"
        />
        <div className="grid grid-cols-2 gap-2 mt-4">
          <button
            onClick={() => handleCloseModal('telegram')}
            disabled={formState.loading}
            className={`flex items-center justify-center p-2 rounded-md ${formState.loading ? 'bg-gray-400' : 'bg-red-500'}`}
          >
            Отмена
          </button>
          <button
            onClick={() => handleTelegramIdUpdate(formState.telegramIdInput)}
            disabled={formState.loading}
            className={`flex items-center justify-center p-2 rounded-md ${formState.loading ? 'bg-gray-400' : 'bg-green-500'}`}
          >
            Сохранить
          </button>
        </div>
      </ModalInput>

      {/* Модал для выбора цвета */}
      <ModalInput
        isOpen={formState.modals.color}
        onClose={() => handleCloseModal('color')}
        closeButton={false}
      >
        <ModalColorPicker
          onClose={() => handleCloseModal('color')}
          userName={formState.name}
          initColor={formState.color}
          selectColor={handleColorUpdate}
        />
      </ModalInput>

      {/* Основной интерфейс */}
      <div className="h-14 bg-white flex justify-between my-1 p-1">
        <div className="flex items-center">
          <button
            onClick={() => router.back()}
            className="bg-[#2B7FFF] px-4 h-full flex items-center rounded-md"
            aria-label="Назад"
          >
            <Image
              src="/arrow_back.svg"
              alt="Назад"
              width={24}
              height={24}
              priority
            />
          </button>
          <div className="ms-4 text-xl font-semibold">Настройки</div>
        </div>
      </div>

      {/* Прочие элементы интерфейса */}
      {/* ... остальной код без изменений ... */}
    </>
  )
}

export default UserSetting
